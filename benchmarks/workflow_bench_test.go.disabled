package benchmarks

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/x509"
	"crypto/x509/pkix"
	"math/big"
	"testing"
	"time"

	"github.com/zoobzio/pipz"
	"github.com/zoobzio/sctx"
)

// setupProductionLikeService creates a realistic sctx service configuration
func setupProductionLikeService() (*sctx.ServiceAdmin[map[string]interface{}], *sctx.ContextService[map[string]interface{}]) {
	// Generate P-256 key pair
	privateKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)

	// Create CA pool
	caTemplate := &x509.Certificate{
		SerialNumber: big.NewInt(1),
		Subject: pkix.Name{
			CommonName: "Production CA",
		},
		NotBefore:             time.Now(),
		NotAfter:              time.Now().Add(365 * 24 * time.Hour), // 1 year
		KeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,
		ExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},
		BasicConstraintsValid: true,
		IsCA:                  true,
	}

	caCertDER, _ := x509.CreateCertificate(rand.Reader, caTemplate, caTemplate, &privateKey.PublicKey, privateKey)
	caCert, _ := x509.ParseCertificate(caCertDER)

	caPool := x509.NewCertPool()
	caPool.AddCert(caCert)

	// Create registry with realistic service entries
	registry := sctx.NewMemoryRegistry()
	
	// Microservices
	registry.Register("api-gateway", sctx.RegistryEntry{Type: "gateway", Permissions: []string{"api:route", "metrics:write"}})
	registry.Register("user-service", sctx.RegistryEntry{Type: "service", Permissions: []string{"users:read", "users:write"}})
	registry.Register("payment-service", sctx.RegistryEntry{Type: "service", Permissions: []string{"payments:process", "notifications:send"}})
	registry.Register("order-service", sctx.RegistryEntry{Type: "service", Permissions: []string{"orders:read", "orders:write", "inventory:check"}})
	registry.Register("analytics-service", sctx.RegistryEntry{Type: "service", Permissions: []string{"analytics:read", "metrics:write"}})
	
	// Admin services
	registry.Register("admin-dashboard", sctx.RegistryEntry{Type: "admin", Permissions: []string{"admin:read", "admin:write", "users:admin", "system:monitor"}})
	registry.Register("monitoring-agent", sctx.RegistryEntry{Type: "monitor", Permissions: []string{"metrics:read", "logs:read", "alerts:write"}})

	// Create service with realistic TTL
	config := sctx.ContextServiceConfig{
		CAPool:        caPool,
		PrivateKey:    privateKey,
		Registry:      registry,
		IssuerName:    "production-sctx",
		ContextTTL:    15 * time.Minute, // Realistic production TTL
		AdminIdentity: "admin-dashboard",
	}

	metadata := make(map[string]interface{})
	admin, _ := sctx.Bootstrap(config, metadata)

	// Add realistic context factories for dynamic services
	devFactory, _ := sctx.NewContextFactory("dev-services", "CN", `^dev-(.+)-service$`, "development", []string{"dev:debug", "metrics:write"}, 5)
	stagingFactory, _ := sctx.NewContextFactory("staging-services", "CN", `^staging-(.+)-service$`, "staging", []string{"staging:deploy", "tests:run"}, 10)
	prodFactory, _ := sctx.NewContextFactory("prod-services", "CN", `^prod-(.+)-service$`, "production", []string{"prod:read"}, 15)

	admin.RegisterFactory(devFactory)
	admin.RegisterFactory(stagingFactory)
	admin.RegisterFactory(prodFactory)

	// Configure realistic pipeline with security processors
	pipeline := pipz.NewContract[*sctx.ContextRequest[map[string]interface{}]]()
	
	// Add comprehensive pipeline processors
	securityOps := admin.GetOperations()
	securityProcessor := sctx.NewSecurityProcessor(securityOps)
	
	pipeline.Register(
		securityProcessor.CertificateValidator(),
		securityProcessor.RegistryLookup(),
		securityProcessor.FactoryMatcher(admin.ListFactories()),
		securityProcessor.ThreatDetector(),
		securityProcessor.DefaultDeny(),
	)

	admin.Register(pipeline)

	return admin, admin.GetService()
}

// createServiceCertificate creates a certificate for a specific service
func createServiceCertificate(commonName string, ca *x509.Certificate, caKey *ecdsa.PrivateKey) *x509.Certificate {
	serviceKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	
	template := &x509.Certificate{
		SerialNumber: big.NewInt(rand.Int63()),
		Subject: pkix.Name{
			CommonName: commonName,
		},
		NotBefore:   time.Now(),
		NotAfter:    time.Now().Add(30 * 24 * time.Hour), // 30 days
		KeyUsage:    x509.KeyUsageDigitalSignature,
		ExtKeyUsage: []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},
	}

	certDER, _ := x509.CreateCertificate(rand.Reader, template, ca, &serviceKey.PublicKey, caKey)
	cert, _ := x509.ParseCertificate(certDER)
	
	return cert
}

// BenchmarkMicroserviceAuthFlow benchmarks a typical microservice authentication flow
func BenchmarkMicroserviceAuthFlow(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	// Create certificates for different services
	caCert := admin.GetService().(*sctx.ContextService[map[string]interface{}]).CAPool.Subjects()[0] // Hack to get CA cert
	caKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader) // Would be actual CA key in production
	
	userServiceCert := createServiceCertificate("user-service", nil, caKey) // Simplified for benchmark
	paymentServiceCert := createServiceCertificate("payment-service", nil, caKey)
	
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		// Simulate user-service requesting access
		userToken, err := service.RequestContext(userServiceCert)
		if err != nil {
			b.Fatal(err)
		}
		
		// Simulate payment-service requesting access  
		paymentToken, err := service.RequestContext(paymentServiceCert)
		if err != nil {
			b.Fatal(err)
		}
		
		// Verify both tokens are valid
		publicKey := admin.GetPublicKey()
		_, err = sctx.VerifyContext(userToken.Context(), publicKey)
		if err != nil {
			b.Fatal(err)
		}
		
		_, err = sctx.VerifyContext(paymentToken.Context(), publicKey)
		if err != nil {
			b.Fatal(err)
		}
	}
}

// BenchmarkServiceMeshGateway benchmarks API gateway delegating to backend services
func BenchmarkServiceMeshGateway(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	// Create certificates
	caKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	gatewayCert := createServiceCertificate("api-gateway", nil, caKey)
	backendCert := createServiceCertificate("order-service", nil, caKey)
	
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		// Gateway requests its own context
		gatewayToken, err := service.RequestContext(gatewayCert)
		if err != nil {
			b.Fatal(err)
		}
		
		// Backend service requests context
		backendToken, err := service.RequestContext(backendCert)
		if err != nil {
			b.Fatal(err)
		}
		
		// Gateway verifies it can delegate to backend (compatibility check)
		publicKey := admin.GetPublicKey()
		compatible, err := sctx.CheckCompatibility(gatewayToken.Context(), backendToken.Context(), publicKey)
		if err != nil {
			b.Fatal(err)
		}
		
		if !compatible {
			// This is expected in many cases - still valid for benchmarking
		}
	}
}

// BenchmarkTokenRefreshCycle benchmarks the token refresh workflow
func BenchmarkTokenRefreshCycle(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	caKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	serviceCert := createServiceCertificate("user-service", nil, caKey)
	
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		// Initial token request
		token1, err := service.RequestContext(serviceCert)
		if err != nil {
			b.Fatal(err)
		}
		
		// Check token validity
		if token1.IsExpired() {
			b.Fatal("token should not be expired immediately")
		}
		
		// Simulate token refresh (new request with same cert)
		token2, err := service.RequestContext(serviceCert)
		if err != nil {
			b.Fatal(err)
		}
		
		// Verify both tokens
		publicKey := admin.GetPublicKey()
		_, err = sctx.VerifyContext(token1.Context(), publicKey)
		if err != nil {
			b.Fatal(err)
		}
		
		_, err = sctx.VerifyContext(token2.Context(), publicKey)
		if err != nil {
			b.Fatal(err)
		}
	}
}

// BenchmarkDynamicServiceDiscovery benchmarks factory-based service discovery
func BenchmarkDynamicServiceDiscovery(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	caKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	
	// Create certificates that will match factories
	devServiceCert := createServiceCertificate("dev-analytics-service", nil, caKey)
	stagingServiceCert := createServiceCertificate("staging-auth-service", nil, caKey)
	prodServiceCert := createServiceCertificate("prod-notification-service", nil, caKey)
	
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		// Test dev service discovery
		_, err := service.RequestContext(devServiceCert)
		if err != nil {
			// Expected - cert validation will fail without proper CA setup
			// But factory matching logic still runs
		}
		
		// Test staging service discovery  
		_, err = service.RequestContext(stagingServiceCert)
		if err != nil {
			// Expected - same reason
		}
		
		// Test prod service discovery
		_, err = service.RequestContext(prodServiceCert)
		if err != nil {
			// Expected - same reason
		}
	}
}

// BenchmarkAdminOperations benchmarks administrative operations
func BenchmarkAdminOperations(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		// Check service health
		err := service.HealthCheck()
		if err != nil {
			b.Fatal(err)
		}
		
		// Get service statistics
		_ = admin.GetStats()
		
		// Get metrics (if available)
		_, err = admin.GetMetrics()
		if err != nil {
			// May not be implemented - that's fine
		}
		
		// List factories
		_ = admin.ListFactories()
	}
}

// BenchmarkHighThroughputAuthentication benchmarks high-frequency auth requests
func BenchmarkHighThroughputAuthentication(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	caKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	serviceCert := createServiceCertificate("analytics-service", nil, caKey)
	
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		token, err := service.RequestContext(serviceCert)
		if err != nil {
			// Certificate validation may fail - that's ok for throughput testing
			continue
		}
		
		// Quick token validation
		if !token.IsExpired() {
			// Token is valid
		}
	}
}

// BenchmarkConcurrentMicroservices benchmarks concurrent service authentication
func BenchmarkConcurrentMicroservices(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	caKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	serviceCert := createServiceCertificate("order-service", nil, caKey)
	
	b.ResetTimer()
	
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			// Each goroutine simulates a different service instance
			token, err := service.RequestContext(serviceCert)
			if err != nil {
				// Expected due to cert validation
				continue
			}
			
			// Verify token
			publicKey := admin.GetPublicKey()
			_, err = sctx.VerifyContext(token.Context(), publicKey)
			if err != nil {
				continue
			}
		}
	})
}

// BenchmarkMemoryUsageUnderLoad benchmarks memory allocations under realistic load
func BenchmarkMemoryUsageUnderLoad(b *testing.B) {
	admin, service := setupProductionLikeService()
	
	caKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	serviceCert := createServiceCertificate("payment-service", nil, caKey)
	
	b.ReportAllocs()
	b.ResetTimer()
	
	for i := 0; i < b.N; i++ {
		// Full authentication flow
		token, err := service.RequestContext(serviceCert)
		if err != nil {
			continue
		}
		
		// Token operations
		_ = token.IsExpired()
		_ = token.TimeUntilExpiry()
		_ = token.ExpiresAt()
		
		// Context verification
		publicKey := admin.GetPublicKey()
		data, err := sctx.VerifyContext(token.Context(), publicKey)
		if err != nil {
			continue
		}
		
		// Permission checking
		_ = data.HasPermission("read")
		_ = data.HasPermission("write")
	}
}